БД "Интернет-магазин"
Ситуация:
Несколько пользователей (сотрудников отдела закупок) вносят изменения в документы (создают и редактируют приходные накладные).
Важно:
- исключить одновременное изменение одного и того же документа;
- предусмотреть корректное добавление товара на склад (в случае прихода одного и того же товара на один и тот же склад);

SQL:
create or replace PACKAGE PKG_MAIN AS 

--*** Процедура предназначена для вставки или обновления шапки документа DOCS. 
--*** Переход между состояниями документа производится процедурой TransferDocToState
  procedure WriteDOCS(pID DOCS.ID_DOC%type, pDocType DOCS.ID_DOCTYPE%type, pPartner PARTNERS.ID_PARTNER%type,
                      pWareHouse WAREHOUSE.ID_WAREHOUSE%type, pComments DOCS.COMMENTS%type, 
                      pIndividual INDIVIDUALS.ID_INDIVID%type, pPayType PAYTYPES.ID_PAYTYPE%type, 
                      pLoyProg LOYALTY_PROGRAM.ID_LOYPROG%type, pRecipient DOCS.RECIPIENT%type, 
                      pRecTel DOCS.REC_TELEPHONE%type, pIsPickup DOCS.IS_PICKUP%type, pUserID USERS.USER_ID%type) ;
 
 --*** Процедура предназначена для вставки и обновления данных детализации документа DOC_DETAILS                     
  procedure WriteDOC_DETAILS (pIDDetail DOC_DETAILS.ID_DOCDETAIL%type, pID DOCS.ID_DOC%type, pProduct PRODUCTS.ID_PRODUCT%type,
                              pCount DOC_DETAILS.PROD_COUNT%type, pPrice DOC_DETAILS.FULL_PRICE%type, 
                              pPriceLoyProg DOC_DETAILS.PRICE_LOYPROG%type, pUserID USERS.USER_ID%type
                              ) ;
  --*** Переход между состояниями документа
  procedure TransferDocToState(pID DOCS.ID_DOC%type, pIDDocState DOCSTATES.ID_DOC_STATE%type /*ID нового состояния*/, 
                               pUserID USERS.USER_ID%type);

END PKG_MAIN;
/
create or replace PACKAGE BODY PKG_MAIN AS

--*** Процедура предназначена для вставки или обновления шапки документа DOCS. 
--*** Переход между состояниями документа производится другой процедурой
  procedure WriteDOCS(pID DOCS.ID_DOC%type, pDocType DOCS.ID_DOCTYPE%type, pPartner PARTNERS.ID_PARTNER%type,
                      pWareHouse WAREHOUSE.ID_WAREHOUSE%type, pComments DOCS.COMMENTS%type, 
                      pIndividual INDIVIDUALS.ID_INDIVID%type, pPayType PAYTYPES.ID_PAYTYPE%type, 
                      pLoyProg LOYALTY_PROGRAM.ID_LOYPROG%type, pRecipient DOCS.RECIPIENT%type, 
                      pRecTel DOCS.REC_TELEPHONE%type, pIsPickup DOCS.IS_PICKUP%type, pUserID USERS.USER_ID%type)  AS
    IDDoc DOCS.ID_DOC%type;
    DocRow DOCS%rowtype;
    cannot_change EXCEPTION;
    mes varchar2(500);
  BEGIN
    mes := null;
    begin      
      if pID is null then IDDoc := seq_gen_docs.nextval;
      else
        select * into DocRow from DOCS where ID_DOC = pID for update;
      end if;
      if DocRow.ID_DOCSTATE <> 1 /*NEW*/ then
        mes := 'Документ находится не в Новом состоянии.';  
      elsif (pID is not null) and (pDocType <> DocRow.ID_DOCTYPE) then
        mes := 'Нельзя изменить тип документа.';
      end if;
      if mes is not null then
        raise cannot_change;
      end if;
    
      if pID is null then
        insert into DOCS(ID_DOC, ID_DOCTYPE, ID_PARTNER, ID_WAREHOUSE, COMMENTS, ID_INDIVIDUAL, 
                         ID_PAYTYPE, ID_LOYPROG, RECIPIENT, REC_TELEPHONE, IS_PICKUP, USER_ID)
        values          (IDDoc, pDocType, pPartner, pWareHouse, pComments , pIndividual ,
                         pPayType, pLoyProg, pRecipient, pRecTel, pIsPickup, pUserID);
      else
        update DOCS set ID_PARTNER = pPartner, ID_WAREHOUSE = pWareHouse, COMMENTS = pComments,
                        ID_INDIVIDUAL = pIndividual, ID_PAYTYPE = pPayType, ID_LOYPROG = pLoyProg,
                        RECIPIENT = pRecipient, REC_TELEPHONE = pRecTel, IS_PICKUP = pIsPickup, USER_ID = pUserID where ID_DOC = pID;
      end if;
      commit;
    exception
      when no_data_found then
        rollback;
        --*** в перспективе можно завести отдельную табличку на пользовательские ошибки с полями код и сообщение, и вытаскивать
        raise_application_error (-20001, 'Документ с учетным номером ' || pID 
          ||' или программа лояльности с учетным номером '|| pLoyProg ||' не найдены.');
      when cannot_change then
        rollback;
        raise_application_error (-20002, 'Ошибка изменения реквизитов документа. '||mes);
      when others then
        rollback;
        raise_application_error (-20003, 'Ошибка изменения документа. Обратитесь к разработчикам.');
    end;    
  END WriteDOCS;

--*** Процедура предназначена для вставки и обновления данных детализации документа DOC_DETAILS
  procedure WriteDOC_DETAILS (pIDDetail DOC_DETAILS.ID_DOCDETAIL%type, pID DOCS.ID_DOC%type, pProduct PRODUCTS.ID_PRODUCT%type,
                              pCount DOC_DETAILS.PROD_COUNT%type, pPrice DOC_DETAILS.FULL_PRICE%type, 
                              pPriceLoyProg DOC_DETAILS.PRICE_LOYPROG%type, pUserID USERS.USER_ID%type
                              )  AS
   IDDetail DOC_DETAILS.ID_DOCDETAIL%type;
   DocDetailRow DOC_DETAILS%rowtype;
   cannot_change EXCEPTION;
   mes varchar2(500);
  BEGIN
    mes := null;
    begin
      if pID is null then
        mes := 'Детализация должна быть привязана к документу!';
      end if;
      if pProduct is null then
        mes := 'Укажите продукт.';
      end if;
      if mes is not null then
        raise cannot_change;
      end if;
      
      if pIDDetail is null then 
        IDDetail := seq_gen_doc_details.nextval;
      else
        select * into DocDetailRow from DOC_DETAILS where ID_DOCDETAIL = IDDetail for update;
      end if;
      
      if pIDDetail is null then
        insert into DOC_DETAILS(ID_DOCDETAIL, ID_DOC, ID_PRODUCT, PROD_COUNT, FULL_PRICE, PRICE_LOYPROG, DOC_DETAIL_SUM, USER_ID)
          values               (IDDetail, pID, pProduct, pCount, pPrice, pPriceLoyProg, pCount* pPriceLoyProg, pUserID);
      else
        update DOC_DETAILS set ID_PRODUCT = pProduct, PROD_COUNT = pCount, FULL_PRICE = pPrice, PRICE_LOYPROG = pPriceLoyProg,
                                DOC_DETAIL_SUM = pCount * pPriceLoyProg, USER_ID = pUserID where ID_DOCDETAIL = pIDDetail;
      end if;
      commit;
    exception
      when no_data_found then
        rollback;
        raise_application_error (-20004, 'Детализация документа с учетным номером ' || pIDDetail || ' не найдена.');
      when cannot_change then
        rollback;
        raise_application_error (-20005, 'Ошибка изменения детлаизации документа. '||mes); 
    end;
  END WriteDOC_DETAILS;

--*** Переход между состояниями документа
  procedure TransferDocToState(pID DOCS.ID_DOC%type, pIDDocState DOCSTATES.ID_DOC_STATE%type /*ID нового состояния*/, 
                               pUserID USERS.USER_ID%type) as
    NewDocState DOC_STATES_TYPES%rowtype;
    DocType DOCTYPES%rowtype;
    DocRow DOCS%rowtype;
    ProdInWH PRODUCTS_IN_WAREHOUSE%rowtype;
    balance number; /*Ostatok*/
  begin
    begin
      select * into DocRow from DOCS where ID_DOC = pID for update;
      select * into NewDocState from DOC_STATES_TYPES where ID_DOCSTATE = pIDDocState and ID_DOCTYPE = DocRow.ID_DOCTYPE;
      select * into DocType from DOCTYPES where ID_DOCTYPE = DocRow.ID_DOCTYPE;
      
      --*** меняем состояние документа
      update DOCS set ID_DOCSTATE = pIDDocState where ID_DOC = pID;
      --*** для каждой строчки в детализации
      for v in (select * from DOC_DETAILS where ID_DOC = pID for update) loop
      --*** если состояние фиксированное , то:
        if  (NewDocState.IS_FIXED = 'Y') and (DocType.DOC_DIRECTION = 'P'/*приход товара*/) then 
        --***ищем строчку с товаром на складе и добавляем товар (если нет - создаем)
          begin
            select * into ProdInWH 
            from PRODUCTS_IN_WAREHOUSE 
            where ID_PRODUCT = v.ID_PRODUCT and ID_SUPPLIER /*поставщик*/ = DocRow.ID_PARTNER
              and ID_WAREHOUSE = DocRow.ID_WAREHOUSE for update;
           --*** для сохранения истории цены можно сделать отдельную таблицу логов 
            update PRODUCTS_IN_WAREHOUSE 
              set PROD_COUNT = PROD_COUNT + v.PROD_COUNT, PURCHASE_PRICE = v.PRICE_LOYPROG, USER_ID = pUserID
              where ID_PRODUCT = v.ID_PRODUCT and ID_SUPPLIER /*поставщик*/ = DocRow.ID_PARTNER
                and ID_WAREHOUSE = DocRow.ID_WAREHOUSE;  
          exception
            when no_data_found then
              insert into PRODUCTS_IN_WAREHOUSE(ID_PROD_WH, ID_PRODUCT, ID_WAREHOUSE, PROD_COUNT, ID_SUPPLIER, PURCHASE_PRICE, SELLING_PRICE, USER_ID)
                values (seq_gen_prod_in_wh.nextval, v.ID_PRODUCT, DocRow.ID_WAREHOUSE, v.PROD_COUNT, DocRow.ID_PARTNER, v.PRICE_LOYPROG, v.PRICE_LOYPROG, pUserID); 
            when too_many_rows then
              rollback;
              raise_application_error (-20007, 'Произошло задвоение строчек на складе (уч.номер) '||DocRow.ID_WAREHOUSE||
                  ' с продуктом (уч.номер) '||v.ID_PRODUCT||' и поставщиком (уч.номер)'||DocRow.ID_PARTNER);
          end;
        end if;
      end loop;
      commit;
    exception
      when no_data_found then
      rollback;
      raise_application_error (-20006, 'Данные по документу или состоянию не найдены.');
    end;
  end TransferDocToState;
END PKG_MAIN;